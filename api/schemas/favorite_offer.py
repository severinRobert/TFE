from typing import Optional

from models import FavoriteOffers
from pydantic import BaseModel
from sqlalchemy.orm import Session


class FavoriteOffer(BaseModel):
    id: Optional[int]
    user_id: int
    offer_id: int

    class Config:
        orm_mode = True

    @classmethod
    async def add(cls, favorite_offer: 'FavoriteOffer', db: Session) -> 'FavoriteOffer':
        """
        Add a favorite_offer to the database.
        The favorite_offer's id is auto generated by the database.
        The id is suppressed without warning.
        """
        values = favorite_offer.dict()
        values.pop('id')
        db_favorite_offer = FavoriteOffers(**values)

        if await cls.get_by_user_id_and_offer_id(db_favorite_offer.user_id, db_favorite_offer.offer_id, db):
            return None
        
        db.add(db_favorite_offer)
        db.commit()
        db.refresh(db_favorite_offer)
        return db_favorite_offer

    @classmethod
    async def get(cls, id: int, db: Session) -> Optional['favorite_offer']:
        """Get a favorite_offer from the database from its id."""
        favorite_offer = db.query(FavoriteOffers).filter(FavoriteOffers.id == id).first()
        return favorite_offer
    
    @classmethod
    async def get_by_user_id(cls, user_id: int, db: Session) -> Optional['favorite_offer']:
        """Get a favorite_offer from the database from its user_id."""
        favorite_offer = db.query(FavoriteOffers).filter(FavoriteOffers.user_id == user_id).all()
        return favorite_offer
    
    @classmethod
    async def get_by_offer_id(cls, offer_id: int, db: Session) -> Optional['favorite_offer']:
        """Get a favorite_offer from the database from its offer_id."""
        favorite_offer = db.query(FavoriteOffers).filter(FavoriteOffers.offer_id == offer_id).all()
        return favorite_offer
    
    @classmethod
    async def get_by_user_id_and_offer_id(cls, user_id: int, offer_id: int, db: Session) -> Optional['favorite_offer']:
        """Get a favorite_offer from the database from its offer_id."""
        favorite_offer = db.query(FavoriteOffers).filter(FavoriteOffers.user_id == user_id, FavoriteOffers.offer_id == offer_id).first()
        return favorite_offer

    @classmethod
    async def get_all(cls, db: Session) -> list['favorite_offer']:
        """Return a list of all FavoriteOffers from the database."""
        return db.query(FavoriteOffers).all()

    @classmethod
    async def delete(cls, id: int, db: Session) -> Optional['favorite_offer']:
        """Delete a favorite_offer and return it. Return None if the favorite_offer does not exists."""
        favorite_offer = await cls.get(id, db)
        if favorite_offer:
            db.delete(favorite_offer)
            db.commit()
        return favorite_offer
