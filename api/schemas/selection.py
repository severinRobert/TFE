from typing import Optional

from models import Selections
from pydantic import BaseModel, constr
from sqlalchemy import select
from sqlalchemy.orm import Session


class Selection(BaseModel):
    id: Optional[int]
    name: constr(max_length=20)
    description: Optional[constr(max_length=255)]
    selections_groups_id: int

    class Config:
        orm_mode = True

    @classmethod
    async def add(cls, selection: 'Selection', db: Session) -> 'Selection':
        """
        Add a selection to the database.
        The selection's id is auto generated by the database.
        The id is suppressed without warning.
        """
        values = selection.dict()
        values.pop('id')
        db_selection = Selections(**values)
        
        db.add(db_selection)
        db.commit()
        db.refresh(db_selection)
        return db_selection

    @classmethod
    async def get(cls, id: int, db: Session) -> Optional['selection']:
        """Get a selection from the database from its id."""
        selection = db.query(Selections).filter(Selections.id == id).first()
        return selection
    
    @classmethod
    async def get_by_selections_groups_id(cls, id: int, db: Session) -> Optional['selection']:
        """Get a selection from the database from its selections_groups_id."""
        selection = db.query(Selections).filter(Selections.selections_groups_id == id).all()
        return selection

    @classmethod
    async def get_all(cls, db: Session) -> list['selection']:
        """Return a list of all Selections from the database."""
        return db.query(Selections).all()

    @classmethod
    async def delete(cls, id: int, db: Session) -> Optional['selection']:
        """Delete a selection and return it. Return None if the selection does not exists."""
        selection = await cls.get(id, db)
        if selection:
            db.delete(selection)
            db.commit()
        return selection
