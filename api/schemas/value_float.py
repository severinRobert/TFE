from typing import Optional

from models import ValuesFloat
from pydantic import BaseModel, constr
from sqlalchemy import select
from sqlalchemy.orm import Session


class ValueFloat(BaseModel):
    id: Optional[int]
    value: int
    offer_id: int
    field_id: int

    class Config:
        orm_mode = True

    @classmethod
    async def add(cls, value_float: 'ValueFloat', db: Session) -> 'ValueFloat':
        """
        Add a value_float to the database.
        The value_float's id is auto generated by the database.
        The id is suppressed without warning.
        """
        values = value_float.dict()
        values.pop('id')
        db_value_float = ValuesFloat(**values)
        
        db.add(db_value_float)
        db.commit()
        db.refresh(db_value_float)
        return db_value_float

    @classmethod
    async def get(cls, id: int, db: Session) -> Optional['value_float']:
        """Get a value_float from the database from its id."""
        value_float = db.query(ValuesFloat).filter(ValuesFloat.id == id).first()
        return value_float
    
    @classmethod
    async def get_by_offer_id(cls, offer_id: int, db: Session) -> Optional['value_float']:
        """Get a value_float from the database from its offer_id."""
        value_float = db.query(ValuesFloat).filter(ValuesFloat.offer_id == offer_id).all()
        return value_float
    
    @classmethod
    async def get_by_field_id(cls, field_id: int, db: Session) -> Optional['value_float']:
        """Get a value_float from the database from its field_id."""
        value_float = db.query(ValuesFloat).filter(ValuesFloat.field_id == field_id).all()
        return value_float
    
    @classmethod
    async def get_by_offer_id_and_field_id(cls, offer_id: int, field_id: int, db: Session) -> Optional['value_float']:
        """Get a value_float from the database from its field_id."""
        value_float = db.query(ValuesFloat).filter(ValuesFloat.offer_id == offer_id, ValuesFloat.field_id == field_id).first()
        return value_float

    @classmethod
    async def get_all(cls, db: Session) -> list['value_float']:
        """Return a list of all ValuesFloat from the database."""
        return db.query(ValuesFloat).all()

    @classmethod
    async def delete(cls, id: int, db: Session) -> Optional['value_float']:
        """Delete a value_float and return it. Return None if the value_float does not exists."""
        value_float = await cls.get(id, db)
        if value_float:
            db.delete(value_float)
            db.commit()
        return value_float
